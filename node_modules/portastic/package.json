{
  "_args": [
    [
      {
        "raw": "portastic@https://registry.npmjs.org/portastic/-/portastic-1.0.1.tgz",
        "scope": null,
        "escapedName": "portastic",
        "name": "portastic",
        "rawSpec": "https://registry.npmjs.org/portastic/-/portastic-1.0.1.tgz",
        "spec": "https://registry.npmjs.org/portastic/-/portastic-1.0.1.tgz",
        "type": "remote"
      },
      "/Users/sudheendras/Documents/sudhee/edgemicro/azure-microgateway"
    ]
  ],
  "_from": "portastic@>=1.0.1 <2.0.0",
  "_id": "portastic@1.0.1",
  "_inCache": true,
  "_location": "/portastic",
  "_phantomChildren": {},
  "_requested": {
    "raw": "portastic@https://registry.npmjs.org/portastic/-/portastic-1.0.1.tgz",
    "scope": null,
    "escapedName": "portastic",
    "name": "portastic",
    "rawSpec": "https://registry.npmjs.org/portastic/-/portastic-1.0.1.tgz",
    "spec": "https://registry.npmjs.org/portastic/-/portastic-1.0.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/portastic/-/portastic-1.0.1.tgz",
  "_shasum": "1c9805d43fae8f6a40cf0dbc7794091a2e9d0d2a",
  "_shrinkwrap": null,
  "_spec": "portastic@https://registry.npmjs.org/portastic/-/portastic-1.0.1.tgz",
  "_where": "/Users/sudheendras/Documents/sudhee/edgemicro/azure-microgateway",
  "author": {
    "name": "Alan Hoffmeister",
    "email": "alanhoffmeister@gmail.com"
  },
  "bin": {
    "portastic": "./bin/portastic"
  },
  "bugs": {
    "url": "https://github.com/alanhoff/node-portastic/issues"
  },
  "dependencies": {
    "bluebird": "^2.9.34",
    "commander": "^2.8.1",
    "debug": "^2.2.0"
  },
  "description": "Pure javascript swiss knife for port management",
  "devDependencies": {
    "chai": "^3.2.0",
    "coveralls": "^2.11.4",
    "istanbul": "^0.3.17",
    "mocha": "^2.2.5"
  },
  "homepage": "https://github.com/alanhoff/node-portastic#readme",
  "keywords": [
    "port",
    "management",
    "open ports",
    "find open",
    "interface"
  ],
  "license": "ISC",
  "main": "index.js",
  "name": "portastic",
  "optionalDependencies": {},
  "readme": "# portastic\n[![Coverage Status](https://coveralls.io/repos/alanhoff/node-portastic/badge.svg?branch=master)][0]\n[![Travis](https://travis-ci.org/alanhoff/node-portastic.svg)][1]\n[![Dependencies](https://david-dm.org/alanhoff/node-portastic.svg)][2]\n\nPure javascript swiss knife for port management. Find open ports, monitor ports\nand other port relates things.\n\n### API\n\n* `portastic.test(port, [interface , [callback]])`\n\nTest if a port is open. If a callback\nis provided it will be called with an `error` parameter and a second parameter\nwith a `boolean` that tells if the port is open or not. If a callback is not\nprovided the return value will be a promise that will be fullfied with the\nresult.\n\n```javascript\nvar portastic = require('portastic');\n\nportastic.test(8080)\n  .then(function(isOpen){\n    console.log('Port 8080 is %s', isOpen ? 'open' : 'closed');\n  });\n```\n\n* `portastic.find(options, [interface, [callback]])`\n\nRetrieve a list of open ports between `min` and `max`, if a callback is not\nprovided this method will resolve a promise with the results. Options can be:\n\n  * `min` The minimum port number to start with\n  * `max` The maximum port number to scan\n  * `retrieve` How many ports to collect\n\n```javascript\nvar portastic = require('portastic');\n\nportastic.find({\n    min: 8000,\n    max: 8080\n  })\n  .then(function(ports){\n    console.log('Ports available between 8000 and 8080 are: %s',\n      ports.join(', '));\n  });\n```\n\n* `portastic.filter(ports..., [interface, [callback]])`\n\nTest a list of ports and return the open ones. If a callback is not provided\nthis method will resolve a promise with the results\n\n```javascript\nvar portastic = require('portastic');\n\nportastic.filter([8080, 8081, 8082])\n  .then(function(ports){\n    console.log('The available ports are: %s', ports.join(', '));\n  });\n```\n\n* `portastic.Monitor(ports...)`\n\nMonitor is an `EventEmitter` that emits `open` when a monitored port is\navailable and `close` when the port has closed.\n\n```javascript\nvar portastic = require('portastic');\nvar monitor = new portastic.Monitor([8080, 8081, 8082]);\n\nmonitor.on('open', function(port){\n  console.log('Port %s is open', port);\n});\n\nmonitor.on('close', function(port){\n  console.log('Port %s is closed', port);\n});\n\nsetTimeout(function(){\n  monitor.stop(); // Stops the monitoring after 5 seconds\n}, 5000);\n```\n\n### Command line\n\nIt's also possible to use `portastic` as a command line utility, you just need\nto install it globally with `npm install -g portastic`. Here is the help command\noutput.\n\n```\n\nUsage: portastic [options] [command]\n\n\nCommands:\n\n  test|t <port>                 Test if a port is closed or open\n  find|f [options] <min> <max>  Find ports that are available to use\n  filter|i <ports...>           Find ports that are open whithin a list of ports\n  monitor|m <ports...>          Monitor a list of ports and logs to the terminal when port state had changed\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\n```\n\n### Testing\n\n```bash\ngit clone git@github.com:alanhoff/node-portastic.git\ncd node-portastic\nnpm install && npm test\n```\n\n### Debugging\n\nTo see debug messages you must set your enviroment variable `DEBUG` to `*` or\n`portastic:*`, example:\n\n```bash\nDEBUG=portastic:\\* npm test\n```\n\n### License (ISC)\n\n```\nCopyright (c) 2015, Alan Hoffmeister <alanhoffmeister@gmail.com>\n\nPermission to use, copy, modify, and distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n```\n\n[0]: https://coveralls.io/github/alanhoff/node-portastic\n[1]: https://travis-ci.org/alanhoff/node-portastic\n[2]: https://david-dm.org/alanhoff/node-portastic\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/alanhoff/node-portastic.git"
  },
  "scripts": {
    "test": "mocha --tdd --bail test/**/*-test.js",
    "travis": "istanbul cover ./node_modules/.bin/_mocha --report lcovonly -- -R spec test/**/*-test.js && cat ./coverage/lcov.info | ./node_modules/.bin/coveralls && rm -rf ./coverage"
  },
  "version": "1.0.1"
}

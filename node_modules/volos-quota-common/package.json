{
  "_args": [
    [
      {
        "raw": "volos-quota-common@https://registry.npmjs.org/volos-quota-common/-/volos-quota-common-0.11.3.tgz",
        "scope": null,
        "escapedName": "volos-quota-common",
        "name": "volos-quota-common",
        "rawSpec": "https://registry.npmjs.org/volos-quota-common/-/volos-quota-common-0.11.3.tgz",
        "spec": "https://registry.npmjs.org/volos-quota-common/-/volos-quota-common-0.11.3.tgz",
        "type": "remote"
      },
      "/Users/sudheendras/Documents/sudhee/edgemicro/azure-microgateway"
    ]
  ],
  "_from": "volos-quota-common@>=0.11.0 <0.12.0",
  "_id": "volos-quota-common@0.11.3",
  "_inCache": true,
  "_location": "/volos-quota-common",
  "_phantomChildren": {},
  "_requested": {
    "raw": "volos-quota-common@https://registry.npmjs.org/volos-quota-common/-/volos-quota-common-0.11.3.tgz",
    "scope": null,
    "escapedName": "volos-quota-common",
    "name": "volos-quota-common",
    "rawSpec": "https://registry.npmjs.org/volos-quota-common/-/volos-quota-common-0.11.3.tgz",
    "spec": "https://registry.npmjs.org/volos-quota-common/-/volos-quota-common-0.11.3.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/volos-quota-apigee",
    "/volos-quota-memory"
  ],
  "_resolved": "https://registry.npmjs.org/volos-quota-common/-/volos-quota-common-0.11.3.tgz",
  "_shasum": "4166e95a2984455e4a5c4c611b036a10cfc9785f",
  "_shrinkwrap": null,
  "_spec": "volos-quota-common@https://registry.npmjs.org/volos-quota-common/-/volos-quota-common-0.11.3.tgz",
  "_where": "/Users/sudheendras/Documents/sudhee/edgemicro/azure-microgateway",
  "bugs": {
    "url": "https://github.com/apigee/volos/issues"
  },
  "dependencies": {
    "debug": "^2.2.0",
    "underscore": "1.6.x"
  },
  "description": "Common library for Quota enforcement in the Volos system.",
  "devDependencies": {},
  "homepage": "https://github.com/apigee/volos",
  "keywords": [
    "quota",
    "memory"
  ],
  "license": "MIT",
  "main": "lib/quota.js",
  "name": "volos-quota-common",
  "optionalDependencies": {},
  "readme": "# volos-quota-common\n\nThis module adds support for \"quotas\" to any API.\n\nA quota is a traffic-management construct that is often used in building APIs and presenting them to\ndevelopers. It is common in the API world to offer a service that is available to each individual application\nfor a limited number of requests per minute, hour, day, or week.\n\nFor instance, the developers of an API may wish to identify each application that uses the API using an \"API key\"\nand offer different levels of service  based on the application. For instance, some applications might be allowed\nto make only 100 API calls per hour, while others might have a much higher limit.\n\nThis module may be used to do that. Using it, you create a \"quota,\" and each quota has the following attributes:\n\n* timeUnit: How often the quota resets -- may be \"minute\", \"hour\", \"day\", \"week\", or \"month\"\n* interval: Works with the timeUnit to determine how often the quota resets. For instance, every 5 days or 2 weeks.\n* startTime: A time at which the quota calculations should begin. For instance, if there is no start time then a\nquota set to reset in \"one day\" will reset 24 hours after the first message is receiver, but if the start time\nis set to the top of the hour on some day, then the quota will always reset at the top of the hour. Start time\nis not allowed for \"month\" timeUnit as it always uses Gregorian month boundaries.\n* allow: How many requests to allow.\n\n* bufferSize (Number) optional, use a memory buffer up to bufferSize to hold quota elements before flushing\n* bufferTimeout (Number) optional, flush the buffer every Number ms (default: 5000ms for minute, 60000ms for others)\n\nOnce a quota has been created, you \"apply\" the quota, which involves setting some additional attributes:\n\n* weight: How much to add to the quota -- the default is 1, but in some advanced cases, API providers will\nassign different weights to different API calls.\n* allow: How many requests to allow. By specifying this here, rather than when the quota is created,\nwe can have different quotas for different apps.\n* key: Identifies the quota bucket. This is a string that may be set to any value. Each key locates\na single quota bucket, which has a separate counter value from other counters.\n\n## Modules\n\nThis module does not do anything on its own -- it depends on an implementation which stores the quota in a particular\nplace. Currently the options are:\n\n* volos-quota-local: Stores quotas in memory on the node where the script is running\n* volos-quota-apigee: Communicates with Apigee via API to update and check quota results.\n\n## Example\n\n    var apiKey = // Some string that comes from the incoming API call\n    var qm = require('volos-quota-apigee');\n    var quota = qm.createQuota({ timeUnit: 'day', interval: 1 });\n    // Allow 100 requests per day for each application, based on API key\n    quota.apply({ key: apiKey, allow: 100 });\n\n## Reference\n\n### Class: Quota\n\n#### Quota.apply(options, callback)\n\nApply the quota and invoke \"callback\" with a result. Options can have the following parameters:\n\n* key (required): A string that identifies the quota bucket. Quotas with different keys\nare treated as separate quotas.\n* weight (optional): A number that indicates how much to increment the quota counter by. Default is 1.\n* allow (optional): How much to allow this quota before it is used up. If this is not specified here,\nthen the value of \"allow\" that was specified when the quota object was created is used.\n\nThe result of this call is delivered by calling \"callback.\" If there was an error, then the first parameter\nwill be an Error object. Otherwise, the first parameter will be \"undefined\" and the second will be\nan object that contains the following fields:\n\n* allowed: (number) How much is allowed in the quota bucket. Essentially the same as the \"allow\" parameter that is\npassed to the \"apply\" method, or the default that came from the overall object.\n* used: (number) How much of the quota bucket is used up.\n* isAllowed: (boolean) Whether the quota bucket has been used up. Basically the same as checking whether\n\"used > allowed\".\n* expiryTime: (number) The number of milliseconds until the quota bucket \"used\" amount is reset to zero.\n\n### Middleware\n\n#### Middleware.apply(options)\n\nApplies quota and returns (403) error on exceeded.\n\nAutomatically sets the following headers on the response: \n\n* X-RateLimit-Limit\n* X-RateLimit-Remaining\n* X-RateLimit-Reset\n\nOptions (optional) may contain:\n\n* key (optional) may be a string or a function that takes the request and generates a string id.\n    if not specified, id will default to the request originalUrl\n* weight (optional) may be a number or a function that takes the request and generates a number\n\n#### Middleware.applyPerAddress(options)\n\nApplies quota on a per-caller address basis and returns (403) error on exceeded.\n\nOptions (optional) may contain:\n\n* key (optional) may be a string or a function that takes the request and generates a string id.\n    if not specified, id will default to the request originalUrl\n* weight (optional) may be a number or a function that takes the request and generates a number\n\n#### Middleware usage examples: \n\n##### Quota.connectMiddleware()\n\nReturns middleware that may be used in a Connect server.\n\n```\n   server.get('/',\n     quota.connectMiddleware().apply(),\n     ...\n```\n \n##### Quota.expressMiddleware()\n\nReturns middleware that may be used in a Express server. \n\n```\n   server.get('/',\n     quota.expressMiddleware().apply(),\n     ...\n```\n\n##### Quota.argoMiddleware()\n\nReturns middleware that may be used in an Argo server. \n\n```\n    server.get('/', function(handle) {\n      handle('request', function(env, next) {\n        oauth.argoMiddleware().apply(env, function() {\n        ...\n```",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/apigee/volos.git"
  },
  "scripts": {},
  "version": "0.11.3"
}

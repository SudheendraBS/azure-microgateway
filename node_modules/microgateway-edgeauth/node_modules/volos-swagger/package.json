{
  "_args": [
    [
      {
        "raw": "volos-swagger@https://registry.npmjs.org/volos-swagger/-/volos-swagger-0.8.0.tgz",
        "scope": null,
        "escapedName": "volos-swagger",
        "name": "volos-swagger",
        "rawSpec": "https://registry.npmjs.org/volos-swagger/-/volos-swagger-0.8.0.tgz",
        "spec": "https://registry.npmjs.org/volos-swagger/-/volos-swagger-0.8.0.tgz",
        "type": "remote"
      },
      "/Users/sudheendras/Documents/sudhee/edgemicro/azure-microgateway"
    ]
  ],
  "_from": "volos-swagger@>=0.8.0 <0.9.0",
  "_id": "volos-swagger@0.8.0",
  "_inCache": true,
  "_location": "/microgateway-edgeauth/volos-swagger",
  "_phantomChildren": {},
  "_requested": {
    "raw": "volos-swagger@https://registry.npmjs.org/volos-swagger/-/volos-swagger-0.8.0.tgz",
    "scope": null,
    "escapedName": "volos-swagger",
    "name": "volos-swagger",
    "rawSpec": "https://registry.npmjs.org/volos-swagger/-/volos-swagger-0.8.0.tgz",
    "spec": "https://registry.npmjs.org/volos-swagger/-/volos-swagger-0.8.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/microgateway-edgeauth",
    "/microgateway-edgeauth/a127-magic"
  ],
  "_resolved": "https://registry.npmjs.org/volos-swagger/-/volos-swagger-0.8.0.tgz",
  "_shasum": "cb8e15b4286c032db19ac6cac8fbef92f2a37dbb",
  "_shrinkwrap": null,
  "_spec": "volos-swagger@https://registry.npmjs.org/volos-swagger/-/volos-swagger-0.8.0.tgz",
  "_where": "/Users/sudheendras/Documents/sudhee/edgemicro/azure-microgateway",
  "author": {
    "name": "Scott Ganyo",
    "email": "sganyo@apigee.com"
  },
  "bugs": {
    "url": "https://github.com/apigee/volos/issues"
  },
  "dependencies": {
    "async": "^1.5.2",
    "debug": "^2.2.0",
    "js-yaml": "^3.5.3",
    "underscore": "^1.8.3"
  },
  "description": "Middleware for bridging swagger (via swagger-tools) and volos",
  "devDependencies": {
    "express": "^4.13.4",
    "should": "^8.2.2",
    "swagger-tools": "^0.10.1",
    "volos-cache-memory": "",
    "volos-oauth-redis": "",
    "volos-quota-memory": ""
  },
  "homepage": "https://github.com/apigee/volos",
  "keywords": [
    "apigee",
    "a127",
    "swagger"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "volos-swagger",
  "optionalDependencies": {},
  "readme": "# volos-swagger\n\nThis module adds support for driving Volos middleware functions entirely though configuration and the Apigee 127\n [Swagger Tools](https://www.npmjs.org/package/swagger-tools) swagger-metadata middleware.\n\nAll Volos modules including Cache, Quota, and OAuth may be configured and tied to Swagger operations using\n configuration similar to the code that you would use to programmatically drive the Volos middleware. \n\nThis can be included in an Apigee-127 project as simply as this:\n    \n    var a127 = require('a127-magic');\n    app.use(a127.middleware());\n\n## Configuration\n\nThe Volos Swagger Configuration is done directly in the Swagger 2.x document:\n \nThe following sections discuss examples from [this](test/support/swagger.yaml) swagger yaml file.  \n\nImportant: Be sure to include any referenced Volos modules in your package.json and run `npm install`.   \n\n### Services\n\nThe \"x-a127-services\" vendors extension section defines how the modules that will be referenced in the other sections \nof this file will be instantiated and configured. The basic idea is that you simply define the array of \nparameters that would have been passed in to create the Volos module had you done it programmatically.\n \nFor example, [volos-cache-memory](../cache/memory/README.md) requires a name and a hash of options. If we want to create\nand use a cache named \"memCache\" that has a time-to-live (ttl) of 1000ms, we'd do so like this: \n\n    x-a127-services:\n      cache:\n        provider: \"volos-cache-memory\"\n        options:\n          name: \"memCache\"\n          ttl: 10000\n\nNote: The key (name) for this resource is \"cache\". This is the name that will be used later to refer to this cache, not\n\"memCache\" - which the provider's name for the cache.\n\nSimilarly, we create a [volos-quota-memory](../quota/memory/README.md) (\"quota\") and \n[volos-oauth-redis](../oauth/redis/README.md) (\"oauth2\") reference in this example: \n\n    quota:\n      provider: \"volos-quota-memory\"\n      options:\n        timeUnit: \"minute\"\n        interval: 1\n        allow: 2\n    oauth2:\n      provider: \"volos-oauth-apigee\"\n      options:\n        encryptionKey: \"This is the key to encrypt/decrypt stored credentials\"\n      \n### Paths & Operations\n\n#### Cache & Quota middleware\n\nVolos modules are applied in a Swagger path or operation with the \"x-a127-apply\" extension. In the example below, we \nhave examples of applying a cache (\"cache\") and a quota (\"quota\"). In each case, we're applying with the Volos defaults.\n\n    paths:\n      /cached:\n        x-a127-apply:\n          cache: {}\n      /quota:\n        x-a127-apply: \n          quota: {}\n\n#### OAuth authorization\n\nOnce you've defined a Volos OAuth provider in x-a127-services, you may use standard Swagger 2.0 authorization constructs\nto delegate to it. This is done by creating a SecurityDefinition like so:\n \n    securityDefinitions:\n      oauth2:\n        type: oauth2\n        scopes: []\n        flow: accessCode\n        authorizationUrl: ignored\n        tokenUrl: ignored\n\nSecurityDefinition Notes:\n \n  - The SecurityDefinition name (in this case, \"oauth2\") MUST match the name of the x-a127-service name.\n  - \"type\" MUST be \"oauth2\"\n  - The remainder of the fields do not affect operation and are for documentation only. \n\nOnce you've defined the SecurityDefinition, you can apply it to your operations. The following will require \na valid OAuth token for the scope \"scope1\" on the \"GET /secured\" operation using the provider called \"oauth2\":  \n \n    /secured:\n      get:\n      security:\n        -\n          oauth2:\n            - scope1\n\n\nDeprecated: Volos authorization may also applied in a Swagger path or operation with the \"x-a127-authorizations\" \nextension. The example below performs the same function as above: It requires that the request is using an OAuth \nToken validated by the \"oauth2\" resource requiring the \"scope1\" scope. (Additional scopes could be required  \nby space-delimiting them or using an array.)\n\n    /secured:\n      x-a127-authorizations: \n        oauth2: \n          scope: \"scope1\"\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/apigee/volos.git"
  },
  "version": "0.8.0"
}
